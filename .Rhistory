sys.date
sys.date()
Sys.Date()
Sys.Time()
Sys.time()
Sys.time()
print 'R-Studio installed by Afroz Hussain'
cat('R-Studio installed by Afroz Hussain')
cat('R-Studio installed by Afroz Hussain on ', Sys.time())
print('test')
print('test'+ Sys.time())
print('test') + Sys.time()
paste('R-Studio installed by Afroz Hussain', Sys.time())
paste('R-Studio installed by Afroz Hussain at', Sys.time())
paste('R-Studio installed by Afroz Hussain at', Sys.time())
install.packages("usingR")
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(galton)
par(mfrow=c(2,1))
hist(galton$child, col="blue", break=100)
hist(galton$child, col="blue", breaks=100)
hist(galton$parent, col="red", breaks=100)
par(mfrow=c(1,2))
hist(galton$child, col="blue", breaks=100)
hist(galton$parent, col="red", breaks=100)
galton$child
mean(galton$child)
diff = galton$child - mean(galton$child)
diff
sum(diff)
sum(diff) == 0
sum(diff) - 0
diff
diff = (galton$child - mean(galton$child))^2
diff
sum(diff)
sum(diff)/nrow(galton)
nrow(glaton)
nrow(galton)
plot(galton$child, galton$parent, col="blue", pch=19)
par(mfrow(1))
par(mfrow=1
)
par(mfrow=1)
par(mfrow=c(1,1))
plot(galton$child, galton$parent, col="blue", pch=19)
par(main="Glaton Plot")
main = "galton"
plot(galton$child, galton$parent, col="blue", pch=19, main="Galton Parent vs Child", xlab="child", ylab="parent")
x <- c(0.18, -1.54, 0.42, 0.95)
mu = mean(x)
mu
w <- c(2, 1, 3, 1)
w
sq = (x-mu)^2
sq*w
sum(sq*w)
sq
w*sq
lm(galton$child~galton$parent)
mu
sum(((x-mu)^2)*w)
mu = 0.1471
sum(((x-mu)^2)*w)
mu= 0.0025
sum(((x-mu)^2)*w)
mu=0.300
sum(((x-mu)^2)*w)
mu=1.077
sum(((x-mu)^2)*w)
mu=0.1471
sum(((x-mu)^2)*w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
sum((x-mean(x))^2)
sum((x-mean(x))^2)
sum((x-0.573)^2)
sum((x-0.8)^2)
sum((x-0.36)^2)
sum((x-0.44)^2)
mean(x)
str(mtcars)
lm(mtcars$mpg~mtcars$wt)
model = lm(mtcars$mpg~mtcars$wt)
plot(mtcars$mpg, mtcars$wt)
abline(model)
abline(model)
plot(mtcars$mpg, mtcars$wt)
abline(model)
model
summary(model)
plot(model)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
var(x)
x[1]
(x[x]-mean(x))/var(x)
(x[1]-mean(x))/var(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~0+x)
y = galton$child
x = galton$parent
b1 = cov(x,y)*var(y)/var(x)
b1
b1 = (cov(x,y)*var(y))/var(x)
b1
b0 = mean(y) - b1*mean(x)
b0
rbind(c(b0,b1)m lm(y~x))
rbind(c(b0,b1), c(lm(y~x))
)
rbind(c(b0,b1), coef(lm(y~x)))
b1 = (cor(x,y)*var(y))/var(x)
b0 = mean(y) - b1*mean(x)
rbind(c(b0,b1), coef(lm(y~x)))
b1 = (cor(x,y)*sd(y))/sd(x)
b1
b0 = mean(y) - b1*mean(x)
rbind(c(b0,b1), coef(lm(y~x)))
0.4*1.5
getwd()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
qplot(votes, rating, data = movies, smooth = "loess")
library(ggplot2)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
x <- list(2, "a", "b", TRUE)
clas(x)
class(x)
class(x[[2]])
getwd()
help qunif
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
t.test(1:10, y = c(7:20))
result = t.test(1:10, y = c(7:20))
class(result)
typeof(result)
result[0]
result[2]
p.value
result[p.value]
library(googleVis)
demo(googleVis)
library(googleVis)
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Line <- gvisLineChart(df)
plot(Line)
Line
plot(Line)
plot(Line)
library(ggplot2)
install.packages("ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
qplot(hp,mpg,data=mtcars)+geom_smooth()
> system.time(runif(3000^3)*3)
user  system elapsed
0.339   0.071   0.407
system.time(runif(3000^3)*3)
system.time(runif(3^3)*3)
system.time(runif(30^3)*3)
system.time(runif(300^3)*3)
system.time(runif(3000^3)*3)
system.time(runif(300^3)*3)
system.time(runif(300^3)*3)
system.time(runif(300^3)*3)
system.time(runif(3000^3, max=3))
system.time(runif(300^3, max=3))
prod
prod(1 - (0:24)/365)
prod(1 - (0:3)/365)
prod(1 - (0:2)/365)
prod(1 - (0:1)/365)
prod(1 - (0:3)/365)
1 - prod(1 - (0:1)/365)
1 - prod(1 - (0:1)/365) * 100
(1 - prod(1 - (0:1)/365) )* 100
(1 - prod(1 - (0:2)/365) )* 100
(1 - prod(1 - (0:22)/365) )* 100
p <- numeric(50)
for (n in 1:50)      {
q <- 1 - (0:(n - 1))/365
p[n] <- 1 - prod(q)	  }
plot(p)        # Makes Figure 1
p <- numeric(50)
for (n in 1:22)      {
q <- 1 - (0:(n - 1))/365
p[n] <- 1 - prod(q)	  }
plot(p)        # Makes Figure 1
p <- numeric(22)
for (n in 1:22)      {
q <- 1 - (0:(n - 1))/365
p[n] <- 1 - prod(q)	  }
plot(p)        # Makes Figure 1
xlabel = 'Team Size'
plot(p)
xlab = 'Team Size'
plot (p, xlab='Team Size')
plot (p, xlab='Team Size', ylab='Prob.', main= 'Probability that at least two people would have same birthday at predicitify.me')
plot (p, xlab='Team Size', ylab='Prob.', main= 'predicitify.me at present')
plot (p, xlab='Team Size', ylab='Prob.', main= 'predicitify.me so fat')
plot (p, xlab='Team Size', ylab='Prob.', main= 'predicitify.me so far')
(1 - prod(1 - (0:365)/365) )* 100
p <- numeric(366)
for (n in 1:365)      {
q <- 1 - (0:(n - 1))/365
p[n] <- 1 - prod(q)	  }
plot(p)        # Makes Figure 1
plot (p, xlab='Team Size', ylab='Prob.', main= 'predicitify.me one day')
(1 - prod(1 - (0:60)/365) )* 100
(1 - prod(1 - (0:22)/365) )* 100
p <- numeric(59)
for (n in 1:59)      {
q <- 1 - (0:(n - 1))/365
p[n] <- 1 - prod(q)	  }
plot(p)        # Makes Figure 1
plot (p, xlab='Team Size', ylab='Prob.', main= 'predicitify.me one day!')
365^23
library(dataset)
library(datasets)
mtcars
t.test(mtcars$mpg)
qt(0.05,8)
qt(0.05,8)/(1/3)
qt(0.05,8)/(1/3)-0.95
qt(0.05,8)/(1/3)
qt(0.05,8)*(1/3)
qt(0.05,8)*(1/3)
qt(0.975,8)*(1/3)
x = 1:4
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(x.Prob)
sum(x*Prob)
sum(x*p)
sum(x*.p)
sum(x.*p)
sum(x*p)
hist(runif(1000))
rexp(2)
rexp(n=2)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
mns
nrow(mns)
dim(mns)
length(mns)
mns[1]
mns[2]
library(ToothGrowth)
library(dataset)
library(datasets)
library(ToothGrowth)
data(ToothGrowth)
td = data(ToothGrowth)
td
td.
ToothGrowth
str(ToothGrowth)
summary(ToothGrowth)
library(swirl)
swirl()
5+7
x <- 5+7
x <- 5+7
x
swirl()
x = 5 + 7
swirl()
x <- 5 + 7
bye()
install_from_swirl("R Programming")
swirl()
x <- 5 + 7
qnorn(.95, 1100, 75)
qnorm(0.95, 1100, 75)
qnorm(0.95, 1100, 75/sqrt(100))
qnorm(0.95, 1100, 75/sqrt(1000))
qnorm(0.95, 1100, 75/sqrt(10000))
qnorm(0.95, 1100, 75/sqrt(100000))
qnorm(0.95, 1100, 75/sqrt(1))
qnorm(0.95, 1100, 75/sqrt(100))
75/sqrt(1)
75/sqrt(1000)
75/sqrt(100000)
75/sqrt(10000000)
d <- rnorm(1000, 1100, 75)
plot(d)
plot(d, type = 'l')
plot(d, type = 'l', col='red')
hist(d, type = 'l', col='red')
hist(d, col='red')
hist(d, col='red')
hist( rnorm(10000, 1100, 10), col='red')
hist( rnorm(10000, 1100, 75), col='red')
hist( rnorm(10000, 1100, 5), col='red')
hist( rnorm(100000, 1100, 5), col='red')
hist( rnorm(1000000, 1100, 5), col='red')
hist( rnorm(1000000, 1100, 0), col='red')
hist( rnorm(1000000, 1100, 1), col='red')
hist( rnorm(1000000, 1100, .1), col='red')
hist( rnorm(1000000, 1100, .0001), col='red')
abline(v= mean(rnorm(1000000, 1100, .0001)))
abline(v= mean(rnorm(1000000, 1100, .0001)), lwd = 3)
abline(v= mean(rnorm(1000000, 1100, 1000)), lwd = 3)
abline(v= mean(rnorm(100, 1100, 1000)), lwd = 3)
hist( rnorm(100, 1100, .0001), col='red')
hist( rnorm(100, 1100, 100), col='red')
abline(v= mean(rnorm(100, 1100, 1000)), lwd = 3)
6/32
pnorm(16, mean = 15, 1)
pnorm(14, mean = 15, 1)
pnorm(16, mean = 15, 1) - pnorm(14, mean = 15, 1)
ppois(10, 15)
ppois(10, lambda=15)
library(shiny)
install.packages('shiny')
install.packages('devtools')
library('devtools')
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
author('first_deck')
getwd()
slidify('index.Rmd')
library(kniter)
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
data
getwd()
setwd('G:/Coursera/101 - Data Science Specialization Series/Reproduceable Research/Assign - 01/repdata-data-activity')
data <- read.csv('activity.csv')
names(data)
str(data)
head(data)
nrow(data)
totalSteps = aggregate(steps~date, data=data, sum)
hed(totalsteps)
hed(totalSteps)
head(totalSteps)
hist(totalSteps)
hist(totalSteps$steps)
ts <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
ts
head(ts)
str(data)
head(data)
tail(data)
head(data,40)
head(data[!is.na(data$steps)],40)
head(data[!is.na(data$steps),],40)
head(data[!is.na(data$steps),],10)
head(data[!is.na(data$steps),],20)
tail(data[!is.na(data$steps),],20)
tail(data[data$steps > 0,],20)
head(data[data$steps > 0,],20)
max_steps <- which.max(steps_pattern$average_steps)
totalSteps = aggregate(steps~date, data=data, sum)
totalSteps$steps
max(totalSteps$steps)
which.max(totalSteps$steps)
which.max(totalSteps$steps)
data[which.max(totalSteps$steps),]
steps_pattern <- aggregate(data$steps ~ data$interval, data, FUN=mean, na.rm=T)
steps_pattern
head(steps_pattern)
which.max(steps_pattern$data$interval,)
which.max(steps_pattern$data$interval)
names(steps_pattern) <- c("interval","average_steps")
which.max(steps_pattern$data$interval)
1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
data[104,]
data[105,]
data[104,]
steps_pattern[104]
steps_pattern[104,]
sum(data$steps)
sum(data$interval)
sum(is.na(data$interval))
sum(is.na(data$steps))
sub_nas <- data[is.na(data),]
head(sub_nas)
nrow(sub_nas)
nrow(steps_pattern)
head(steps_pattern)
head(sub_nas)
head(data)
nrow(data)
tail(data)
tail(sub_nas)
tail(steps_pattern)
tail(data)
merge(steps_pattern, sub_nas)$average_steps
head(merge(steps_pattern, sub_nas)$average_steps)
nrow(merge(steps_pattern, sub_nas)$average_steps)
length(merge(steps_pattern, sub_nas)$average_steps)
na_data <- data[is.na(data),]
na_data$steps <- merge(steps_pattern, na_data)$average_steps
data2 <- data
data2[is.na(data), ] <- na_data
head(data2)
steps_pattern[1]
steps_pattern[1,]
data2_daily_steps <- tapply(data2$steps,data2$date,function(x) sum(x,na.rm=TRUE))
data2_daily_steps
dimdata2_daily_steps)
dim(data2_daily_steps)
mean(data2_daily_steps)
median(data2_daily_steps)
round(10.23)
str(data)
name(data)
names(data)
head(data)
weekdays(data$date)
weekdays(as.date(data$date))
weekdays(as.Date(data$date))
daytype <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {
"Weekend"
} else {
"Weekday"
}
}
data2$daytype <- as.factor(sapply(data2$date, daytype))
data2$day <- sapply(data2, FUN= daytype)
averages <- aggregate(steps ~ interval + day, data = data2, mean)
